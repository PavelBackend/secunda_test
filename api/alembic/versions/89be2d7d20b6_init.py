"""Init

Revision ID: 89be2d7d20b6
Revises: 
Create Date: 2025-09-19 14:19:35.813176

"""
from typing import Sequence, Union

from alembic import op
import geoalchemy2
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '89be2d7d20b6'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('activity',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['activity.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('building',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('location', geoalchemy2.types.Geography(geometry_type='POINT', srid=4326, dimension=2, from_text='ST_GeogFromText', name='geography', nullable=False), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address')
    )
    op.create_index('idx_building_location', 'building', ['location'], unique=False, postgresql_using='gist', if_not_exists=True)
    op.create_table('organization',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['building_id'], ['building.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('organization_activity',
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['activity_id'], ['activity.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('organization_id', 'activity_id')
    )
    op.create_table('phone',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('number', sa.String(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # op.drop_index(op.f('place_lookup_name_idx'), table_name='place_lookup', if_exists=True)
    # op.drop_index(op.f('place_lookup_state_idx'), table_name='place_lookup')
    # op.drop_table('place_lookup')
    # op.drop_table('loader_variables')
    # op.drop_index(op.f('countysub_lookup_name_idx'), table_name='countysub_lookup')
    # op.drop_index(op.f('countysub_lookup_state_idx'), table_name='countysub_lookup')
    # op.drop_table('countysub_lookup')
    # op.drop_table('spatial_ref_sys')
    # op.drop_table('bg')
    # op.drop_index(op.f('idx_addrfeat_geom_gist'), table_name='addrfeat', postgresql_using='gist')
    # op.drop_index(op.f('idx_addrfeat_tlid'), table_name='addrfeat')
    # op.drop_index(op.f('idx_addrfeat_zipl'), table_name='addrfeat')
    # op.drop_index(op.f('idx_addrfeat_zipr'), table_name='addrfeat')
    # op.drop_table('addrfeat')
    # op.drop_table('tract')
    # op.drop_table('topology')
    # op.drop_table('zip_lookup')
    # op.drop_table('pagc_rules')
    # op.drop_index(op.f('tige_cousub_the_geom_gist'), table_name='cousub', postgresql_using='gist')
    # op.drop_table('cousub')
    # op.drop_table('state_lookup')
    # op.drop_index(op.f('tiger_place_the_geom_gist'), table_name='place', postgresql_using='gist')
    # op.drop_table('place')
    # op.drop_table('zip_state_loc')
    # op.drop_index(op.f('idx_tiger_featnames_lname'), table_name='featnames')
    # op.drop_index(op.f('idx_tiger_featnames_snd_name'), table_name='featnames')
    # op.drop_index(op.f('idx_tiger_featnames_tlid_statefp'), table_name='featnames')
    # op.drop_table('featnames')
    # op.drop_table('geocode_settings')
    # op.drop_table('pagc_gaz')
    # op.drop_index(op.f('county_lookup_name_idx'), table_name='county_lookup')
    # op.drop_index(op.f('county_lookup_state_idx'), table_name='county_lookup')
    # op.drop_table('county_lookup')
    # op.drop_table('zip_lookup_all')
    # op.drop_table('layer')
    # op.drop_table('geocode_settings_default')
    # op.drop_table('zip_lookup_base')
    # op.drop_table('pagc_lex')
    # op.drop_index(op.f('secondary_unit_lookup_abbrev_idx'), table_name='secondary_unit_lookup')
    # op.drop_table('secondary_unit_lookup')
    # op.drop_table('loader_platform')
    # op.drop_table('zip_state')
    # op.drop_table('zcta5')
    # op.drop_index(op.f('direction_lookup_abbrev_idx'), table_name='direction_lookup')
    # op.drop_table('direction_lookup')
    # op.drop_index(op.f('idx_tiger_addr_tlid_statefp'), table_name='addr')
    # op.drop_index(op.f('idx_tiger_addr_zip'), table_name='addr')
    # op.drop_table('addr')
    # op.drop_index(op.f('idx_edges_tlid'), table_name='edges')
    # op.drop_index(op.f('idx_tiger_edges_countyfp'), table_name='edges')
    # op.drop_index(op.f('idx_tiger_edges_the_geom_gist'), table_name='edges', postgresql_using='gist')
    # op.drop_table('edges')
    # op.drop_index(op.f('idx_tiger_state_the_geom_gist'), table_name='state', postgresql_using='gist')
    # op.drop_table('state')
    # op.drop_index(op.f('idx_tiger_county'), table_name='county')
    # op.drop_table('county')
    # op.drop_table('loader_lookuptables')
    # op.drop_table('tabblock')
    # op.drop_index(op.f('street_type_lookup_abbrev_idx'), table_name='street_type_lookup')
    # op.drop_table('street_type_lookup')
    # op.drop_table('tabblock20')
    # op.drop_index(op.f('idx_tiger_faces_countyfp'), table_name='faces')
    # op.drop_index(op.f('idx_tiger_faces_tfid'), table_name='faces')
    # op.drop_index(op.f('tiger_faces_the_geom_gist'), table_name='faces', postgresql_using='gist')
    # op.drop_table('faces')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    pass